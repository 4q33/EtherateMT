gcc -o etherate_mt etherate_mt.c -lpthread -Wall -Werror -pedantic -ftrapv -O3 --std=c11

/*
  Compile:

  -lpthread
  Compile with support for Pthreads

  -Wall
  Turns on all optional warnings which are desirable for normal code.  At present this is -Wcomment, -Wtrigraphs, -Wmultichar and a warning about integer
  promotion causing a change of sign in "#if" expressions.  Note that many of the preprocessor's warnings are on by default and have no options to control
  them.

  -Werror
  Make all warnings into hard errors.  Source code which triggers warnings will be rejected.

  -pedantic
   Issue all the mandatory diagnostics listed in the C standard.  Some of them are left out by default, since they trigger frequently on harmless code.

  -ftrapv
  This option generates traps for signed overflow on addition, subtraction, multiplication operations.

  -O3
  With -O, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time.
  -O1 Optimize.  Optimizing compilation takes somewhat more time, and a lot more memory for a large function.
  -O2 Optimize even more.  GCC performs nearly all supported optimizations that do not involve a space-speed tradeoff.  As compared to -O, this option
  increases both compilation time and the performance of the generated code.
  -O3 Optimize yet more.

*/


/* 
  Debug:

  gcc -o etherate_mt etherate_mt.c -lpthread -Wall -Werror -pedantic -ftrapv -fstack-protector-all -Og -g --std=c11 -fsanitize=address

  -fstack-protector-all
  Like -fstack-protector except that all functions are protected

  -fsanitize=address
  Enable AddressSanitizer, a fast memory error detector. Memory access instructions are instrumented to detect out-of-bounds and use-after-free bugs.
  This will not work with Valgrind!

  -Og
  With -O, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time.
  -O0 Reduce compilation time and make debugging produce the expected results.  This is the default.
  -Og Optimize debugging experience.  -Og enables optimizations that do not interfere with debugging. It should be the optimization level of choice for the
  standard edit-compile-debug cycle, offering a reasonable level of optimization while maintaining fast compilation and a good debugging experience.

  -g
  Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF 2).  GDB can work with this debugging information.

*/

/*
  Valgrind:

  sudo valgrind --leak-check=full --show-leak-kinds=all --leak-resolution=high --track-origins=yes --expensive-definedness-checks=yes --track-fds=yes ./etherate_mt -I 3 -r

  --leak-check=full
  When enabled, search for memory leaks when the client program finishes.

  --show-leak-kinds=all
  Specifies the leak kinds to show in a full leak search.

  --leak-resolution=high
  When doing leak checking, determines how willing Memcheck is to consider different backtraces to be the same for the purposes of merging multiple leaks
  into a single leak report

  --track-origins=yes
  Controls whether Memcheck tracks the origin of uninitialised values.

  --expensive-definedness-checks=yes
  Controls whether Memcheck should employ more precise but also more expensive (time consuming) algorithms when checking the definedness of a value.

  --track-fds=yes
  When enabled, Valgrind will print out a list of open file descriptors on exit.

*/

/* 
  Callgrind:

  sudo valgrind --tool=callgrind ./etherate_mt -I 3 -r

  callgrind_annotate ./callgrind.out.2974 /path/to/tests.cpp
  # or
  callgrind_annotate --auto=yes ./callgrind.out.2974

*/

/*
  Cachegrind:

  sudo valgrind --tool=cachegrind --branch-sim=yes ./etherate_mt -I 3 -r

  --branch-sim=yes
  Enables collection of branch instruction and misprediction counts.

  cg_annotate ./cachegrind-out /path/to/tests.cpp
  # or
  sudo kcachegrind cachegrind.out

 */

/*
  Perf:
  
  sudo perf stat ./etherate_mt -I 1 -c 1

  sudo perf top

 */
